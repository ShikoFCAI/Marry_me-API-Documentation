openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://laravel5_5.test'
paths:
  /api/admin/getAllUsersInfo:
    get:
      summary: 'Get All Users'' Info'
      description: 'This function to return all users with all their info'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "\"All_Users_info\": [\n{\n\"id\": 1,\n\"name\": \"electa.reilly\",\n\"email\": \"bbauch@example.com\",\n\"email_verified_at\": \"2021-08-25T19:01:58.000000Z\",\n\"phone\": \"812.867.3712\",\n\"birth_day\": \"2002-10-25\",\n\"age\": 1366,\n\"gender\": \"Male\",\n\"image\": \"https://via.placeholder.com/640x480.png/00bb22?text=ut\",\n\"reports\": 7,\n\"ban\": 0,\n\"ban_count\": 780,\n\"certified\": 1,\n\"VIP\": 0,\n\"created_at\": \"2021-08-25T01:47:16.000000Z\",\n\"updated_at\": \"2021-08-25T11:09:25.000000Z\",\n\"mac_address\": \"lWWFYF2V8P\",\n\"id_number\": \"cb2a52b5-e196-31c4-9b88-08c73069151d\",\n\"online\": 0\n},\n{\n\"id\": 2,\n\"name\": \"bashirian.misael\",\n\"email\": \"jayde.langosh@example.org\",\n\"email_verified_at\": \"2021-08-25T09:44:09.000000Z\",\n\"phone\": \"(564) 298-5747\",\n\"birth_day\": \"1977-11-20\",\n\"age\": 8846844,\n\"gender\": \"Male\",\n\"image\": \"https://via.placeholder.com/640x480.png/00dd00?text=veritatis\",\n\"reports\": 579,\n\"ban\": 1,\n\"ban_count\": 5495324,\n\"certified\": 0,\n\"VIP\": 0,\n\"created_at\": \"2021-08-25T19:13:52.000000Z\",\n\"updated_at\": \"2013-10-29T15:06:04.000000Z\",\n\"mac_address\": \"gk9F0GFdaT\",\n\"id_number\": \"a887f7d1-f4b2-3f07-ba3f-c36c3b498e2b\",\n\"online\": 0\n}]"
      tags:
        - 'Admin Controller-1'
  /api/admin/getAllUsersByMethod:
    get:
      summary: 'show list of users'
      description: "This function to return list of users with their info with any (one)(required) method as input\n(id, full name, email, VIP ( (int = 1) to get VIP users),\ngender ( Female or Male),date of creation(timestamp),birthday(date))"
      parameters:
        -
          in: query
          name: id
          description: ''
          example: perspiciatis
          required: false
          schema:
            type: string
            description: ''
            example: perspiciatis
        -
          in: query
          name: name
          description: ''
          example: dignissimos
          required: false
          schema:
            type: string
            description: ''
            example: dignissimos
        -
          in: query
          name: email
          description: ''
          example: consequatur
          required: false
          schema:
            type: string
            description: ''
            example: consequatur
        -
          in: query
          name: gender
          description: ''
          example: nulla
          required: false
          schema:
            type: string
            description: ''
            example: nulla
        -
          in: query
          name: dateOfCreation
          description: ''
          example: eaque
          required: false
          schema:
            type: string
            description: ''
            example: eaque
        -
          in: query
          name: birthdayDate
          description: ''
          example: architecto
          required: false
          schema:
            type: string
            description: ''
            example: architecto
        -
          in: query
          name: VIP
          description: ''
          example: dolor
          required: false
          schema:
            type: string
            description: ''
            example: dolor
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  msg: ' No users are found by This name'
                  Users_info: []
                properties:
                  msg:
                    type: string
                    example: ' No users are found by This name'
                  Users_info:
                    type: array
                    example: []
      tags:
        - 'Admin Controller-1'
  /api/admin/banningUser:
    put:
      summary: 'Banning fake users'
      description: 'This function to Ban user''s account with his/her id (required)'
      parameters:
        -
          in: query
          name: user_id
          description: ''
          example: assumenda
          required: true
          schema:
            type: string
            description: ''
            example: assumenda
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  msg: 'Ban has been done successfully'
                properties:
                  msg:
                    type: string
                    example: 'Ban has been done successfully'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  msg: 'no user found by This id '
                  status: 400
                properties:
                  msg:
                    type: string
                    example: 'no user found by This id '
                  status:
                    type: integer
                    example: 400
      tags:
        - 'Admin Controller-1'
  /api/admin/takeActionOnReport:
    put:
      summary: 'Take action on actual reports'
      description: "This function to take action on report with  input 'report_id' to do report on it\nand input 'action_type' (int) to know what action to do\naction_type can be = 1 || 2 || 3 || 4\n( (1) for no action\nor (2) for removing the report from the user\nor (3) for banning user\nor (4) for temp banning user for limited time (weekly checks))"
      parameters:
        -
          in: query
          name: report_id
          description: ''
          example: deleniti
          required: true
          schema:
            type: string
            description: ''
            example: deleniti
        -
          in: query
          name: action_type
          description: ''
          example: et
          required: true
          schema:
            type: string
            description: ''
            example: et
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  msg: 'Action has been taken successfully by banning the user'
                properties:
                  msg:
                    type: string
                    example: 'Action has been taken successfully by banning the user'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  msg: 'choose action to be taken on this report'
                  status: 400
                properties:
                  msg:
                    type: string
                    example: 'choose action to be taken on this report'
                  status:
                    type: integer
                    example: 400
      tags:
        - 'Admin Controller-1'
  /api/admin/getAllReports:
    get:
      summary: 'Show all reports'
      description: 'This function to show all reports with all details'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  AllReports_info:
                    -
                      id: 1
                      message_id: 1
                      details: 'Consectetur ut ut nihil ea voluptatibus reiciendis iste tempore. Dolores aut possimus perspiciatis ut est fugiat dolore. Id quo voluptas et voluptatem ab aliquam. Consequuntur est aspernatur animi dolor repellat placeat dolores.'
                      action: 4
                      created_at: '2021-08-26T15:19:47.000000Z'
                      updated_at: '2021-08-26T00:00:00.000000Z'
                    -
                      id: 2
                      message_id: 2
                      details: 'Accusantium repellat omnis possimus. Id voluptatibus voluptas facilis iusto. Molestias nostrum a dolores perspiciatis officiis. Omnis ut quae quo itaque explicabo est.'
                      action: 3
                      created_at: '1977-01-22T00:00:00.000000Z'
                      updated_at: '2004-01-27T00:00:00.000000Z'
                    -
                      id: 3
                      message_id: 3
                      details: 'Quo consequatur ad eos sunt. Et aut odit necessitatibus tempora quos sequi omnis. Non nisi eum consequuntur fugit cum pariatur reiciendis. Velit quo in qui error.'
                      action: 2
                      created_at: '2005-07-17T00:00:00.000000Z'
                      updated_at: '2008-05-06T00:00:00.000000Z'
                  status: 200
                properties:
                  AllReports_info:
                    type: array
                    example:
                      -
                        id: 1
                        message_id: 1
                        details: 'Consectetur ut ut nihil ea voluptatibus reiciendis iste tempore. Dolores aut possimus perspiciatis ut est fugiat dolore. Id quo voluptas et voluptatem ab aliquam. Consequuntur est aspernatur animi dolor repellat placeat dolores.'
                        action: 4
                        created_at: '2021-08-26T15:19:47.000000Z'
                        updated_at: '2021-08-26T00:00:00.000000Z'
                      -
                        id: 2
                        message_id: 2
                        details: 'Accusantium repellat omnis possimus. Id voluptatibus voluptas facilis iusto. Molestias nostrum a dolores perspiciatis officiis. Omnis ut quae quo itaque explicabo est.'
                        action: 3
                        created_at: '1977-01-22T00:00:00.000000Z'
                        updated_at: '2004-01-27T00:00:00.000000Z'
                      -
                        id: 3
                        message_id: 3
                        details: 'Quo consequatur ad eos sunt. Et aut odit necessitatibus tempora quos sequi omnis. Non nisi eum consequuntur fugit cum pariatur reiciendis. Velit quo in qui error.'
                        action: 2
                        created_at: '2005-07-17T00:00:00.000000Z'
                        updated_at: '2008-05-06T00:00:00.000000Z'
                    items:
                      type: object
                  status:
                    type: integer
                    example: 200
      tags:
        - 'Admin Controller-1'
  /api/login/Admin:
    post:
      summary: 'Admin Login'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'logged in successfully'
                  'AccessToken:': eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9sb2dpblwvQWRtaW4iLCJpYXQiOjE2Mjk3OTU4MDYsImV4cCI6MTYyOTc5OTQwNiwibmJmIjoxNjI5Nzk1ODA2LCJqdGkiOiJGeGNIRmFXa2FpNnQ0eldVIiwic3ViIjoyMywicHJ2IjoiZGY4ODNkYjk3YmQwNWVmOGZmODUwODJkNjg2YzQ1ZTgzMmU1OTNhOSJ9.qUBMQCRrE3n-t-EDhu0HJpxOJUJqpxvXl7UIXObzpt0
                properties:
                  message:
                    type: string
                    example: 'logged in successfully'
                  'AccessToken:':
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9sb2dpblwvQWRtaW4iLCJpYXQiOjE2Mjk3OTU4MDYsImV4cCI6MTYyOTc5OTQwNiwibmJmIjoxNjI5Nzk1ODA2LCJqdGkiOiJGeGNIRmFXa2FpNnQ0eldVIiwic3ViIjoyMywicHJ2IjoiZGY4ODNkYjk3YmQwNWVmOGZmODUwODJkNjg2YzQ1ZTgzMmU1OTNhOSJ9.qUBMQCRrE3n-t-EDhu0HJpxOJUJqpxvXl7UIXObzpt0
        404:
          description: failed
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No such admin user, invalid username or password'
                properties:
                  message:
                    type: string
                    example: 'No such admin user, invalid username or password'
        400:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Invalid data\"\n \"Errors in\":{\"username\":[\"The username field is required.\"]}\n}"
      tags:
        - 'Admin Controller 2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'The name of the admin.'
                  example: aya
                password:
                  type: string
                  description: 'The password of the admin.'
                  example: ayasameh123
              required:
                - username
                - password
      security: []
  /api/createQuestion:
    post:
      summary: 'Create Question'
      description: 'This endpoint lets you create a new question to be asked to the user.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Question added successfully!'
                properties:
                  message:
                    type: string
                    example: 'Question added successfully!'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid Data!'
                properties:
                  message:
                    type: string
                    example: 'Invalid Data!'
      tags:
        - 'Admin Controller 2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                  description: 'The question to the user.'
                  example: perferendis
                gender:
                  type: string
                  description: 'The user gender to which the question will be asked Male or Female.'
                  example: accusamus
              required:
                - question
                - gender
  /api/editQuestion:
    patch:
      summary: 'Edit Question'
      description: 'This endpoint lets you edit a question to be asked to the user.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Question edited successfully!'
                properties:
                  message:
                    type: string
                    example: 'Question edited successfully!'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid Data!'
                properties:
                  message:
                    type: string
                    example: 'Invalid Data!'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Question Not Found!'
                properties:
                  message:
                    type: string
                    example: 'Question Not Found!'
      tags:
        - 'Admin Controller 2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The id of the question to be edited.'
                  example: 12
                question:
                  type: string
                  description: 'The question to the user.'
                  example: in
                gender:
                  type: string
                  description: 'The user gender to which the question will be asked Male or Female.'
                  example: est
              required:
                - id
  /api/deleteQuestion:
    delete:
      summary: 'Delete Question'
      description: 'This endpoint lets you delete a question to be asked to the user.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Question deleted successfully!'
                properties:
                  message:
                    type: string
                    example: 'Question deleted successfully!'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Question Not Found!'
                properties:
                  message:
                    type: string
                    example: 'Question Not Found!'
      tags:
        - 'Admin Controller 2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The id of the question to be deleted.'
                  example: 1
              required:
                - id
  /api/addSuggestedAnswer:
    post:
      summary: 'Add Suggested Answer'
      description: 'This endpoint lets you add a suggested answer to a question.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Answer added successfully!'
                properties:
                  message:
                    type: string
                    example: 'Answer added successfully!'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid Data!'
                properties:
                  message:
                    type: string
                    example: 'Invalid Data!'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Question Not Found!'
                properties:
                  message:
                    type: string
                    example: 'Question Not Found!'
      tags:
        - 'Admin Controller 2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_id:
                  type: integer
                  description: 'The id of the question.'
                  example: 11
                answer:
                  type: string
                  description: 'The suggested answer.'
                  example: laboriosam
              required:
                - question_id
                - answer
  /api/editSuggestedAnswer:
    patch:
      summary: 'Edit Suggested Answer'
      description: 'This endpoint lets you edit an answer to a question.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Answer edited successfully!'
                properties:
                  message:
                    type: string
                    example: 'Answer edited successfully!'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid Data!'
                properties:
                  message:
                    type: string
                    example: 'Invalid Data!'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Answer Not Found!'
                properties:
                  message:
                    type: string
                    example: 'Answer Not Found!'
      tags:
        - 'Admin Controller 2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The id of the answer to be edited.'
                  example: 10
                answer:
                  type: string
                  description: 'The answer.'
                  example: eos
              required:
                - id
                - answer
  /api/deleteSuggestedAnswer:
    delete:
      summary: 'Delete Suggested Answer'
      description: 'This endpoint lets you delete an answer to a question.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Answer deleted successfully!'
                properties:
                  message:
                    type: string
                    example: 'Answer deleted successfully!'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Answer Not Found!'
                properties:
                  message:
                    type: string
                    example: 'Answer Not Found!'
      tags:
        - 'Admin Controller 2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: 'The id of the answer to be deleted.'
                  example: 1
              required:
                - id
  /api/getUserIdNum:
    get:
      summary: 'Get User Id Number'
      description: 'This endpoint lets you get the National Id Number of a User.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  body: 7fa9778f-ae29-323b-bff3-5870e45a41f1
                properties:
                  body:
                    type: string
                    example: 7fa9778f-ae29-323b-bff3-5870e45a41f1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User Not Found!'
                properties:
                  message:
                    type: string
                    example: 'User Not Found!'
      tags:
        - 'Admin Controller 2'
  /api/certifyUser:
    patch:
      summary: 'Certify User'
      description: 'This endpoint lets you certify a user when their National Id number has been checked and confirmed.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User certified successfully!'
                properties:
                  message:
                    type: string
                    example: 'User certified successfully!'
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User Not Found!'
                properties:
                  message:
                    type: string
                    example: 'User Not Found!'
      tags:
        - 'Admin Controller 2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'The id of said user.'
                  example: 7
              required:
                - user_id
  /api/getNumOfOnlineUsers:
    get:
      summary: 'Get Number of Online Users'
      description: 'This endpoint lets you get the number of online users.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  body: 5
                properties:
                  body:
                    type: integer
                    example: 5
      tags:
        - 'Admin Controller 2'
  /api/getNumOfChats:
    get:
      summary: 'Get Number of Chats'
      description: 'This endpoint lets you get total number of chats between users.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  body: 5
                properties:
                  body:
                    type: integer
                    example: 5
      tags:
        - 'Admin Controller 2'
  /api/getNumOfRequests:
    get:
      summary: 'Get Number of Requests'
      description: 'This endpoint lets you get number of chat requests of (free) users.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  body: 5
                properties:
                  body:
                    type: integer
                    example: 5
      tags:
        - 'Admin Controller 2'
  /api/getNumOfReports:
    get:
      summary: 'Get Number of Reports'
      description: 'This endpoint lets you get number of reports made by users.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  body: 5
                properties:
                  body:
                    type: integer
                    example: 5
      tags:
        - 'Admin Controller 2'
  /api/getNumOfBannedUsers:
    get:
      summary: 'Get Number of Banned Users'
      description: 'This endpoint lets you get number of users that are temporarily banned.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  body: 5
                properties:
                  body:
                    type: integer
                    example: 5
      tags:
        - 'Admin Controller 2'
  /api/getNumOfBlocks:
    get:
      summary: 'Get Number of Blocks'
      description: 'This endpoint lets you get number of blocks.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  body: 5
                properties:
                  body:
                    type: integer
                    example: 5
      tags:
        - 'Admin Controller 2'
  /api/getNumOfFavs:
    get:
      summary: 'Get Number of Favs'
      description: 'This endpoint lets you get number of favourites.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  body: 5
                properties:
                  body:
                    type: integer
                    example: 5
      tags:
        - 'Admin Controller 2'
  /api/register/Admin:
    post:
      summary: 'Admin registeration'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        201:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"New admin is created successfully, you can now login\",\n}"
        401:
          description: unauthorized
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'you are not a super admin'
                properties:
                  message:
                    type: string
                    example: 'you are not a super admin'
        400:
          description: failed
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'New admin creation failed, please check the data passed'
                properties:
                  message:
                    type: string
                    example: 'New admin creation failed, please check the data passed'
      tags:
        - 'Admin Controller 2'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'The name of the admin.'
                  example: aya
                password:
                  type: string
                  description: 'The password of the admin.'
                  example: ayasameh123
                super_admin:
                  type: integer
                  description: 'Specify if the new admin is a super admin(1:super admin,0:normal admin).'
                  example: 0
              required:
                - username
                - password
                - super_admin
  /api/register:
    post:
      summary: 'User register request'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Successfully created your account, just verify it at your email !'
                  user:
                    name: ayadA1
                    email: ayadA@gmail.com
                    phone: '01234567899'
                    gender: female
                    birth_day: '1999-11-09'
                    age: 21
                    reports: 0
                    ban: 0
                    ban_count: 0
                    VIP: 0
                    certified: 0
                    mac_address: '9E-4E-36-D3-D0-20 \Device\Tcpip_{4DBEE7F7-37E0-401A-B6C5-3EEFD760542C}'
                    updated_at: '2021-08-22T09:27:57.000000Z'
                    created_at: '2021-08-22T09:27:57.000000Z'
                    id: 21
                  'AccessToken:': eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9yZWdpc3RlciIsImlhdCI6MTYyOTYyNDQ5MSwiZXhwIjoxNjI5NjI4MDkxLCJuYmYiOjE2Mjk2MjQ0OTEsImp0aSI6InVHTFY3ZEwzUVRSNGJSRUoiLCJzdWIiOjIxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.wkJgQT7RwycOA_3asmK8kdMRvV4UMpGXpeB2GBu6t0s
                properties:
                  message:
                    type: string
                    example: 'Successfully created your account, just verify it at your email !'
                  user:
                    type: object
                    example:
                      name: ayadA1
                      email: ayadA@gmail.com
                      phone: '01234567899'
                      gender: female
                      birth_day: '1999-11-09'
                      age: 21
                      reports: 0
                      ban: 0
                      ban_count: 0
                      VIP: 0
                      certified: 0
                      mac_address: '9E-4E-36-D3-D0-20 \Device\Tcpip_{4DBEE7F7-37E0-401A-B6C5-3EEFD760542C}'
                      updated_at: '2021-08-22T09:27:57.000000Z'
                      created_at: '2021-08-22T09:27:57.000000Z'
                      id: 21
                  'AccessToken:':
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9yZWdpc3RlciIsImlhdCI6MTYyOTYyNDQ5MSwiZXhwIjoxNjI5NjI4MDkxLCJuYmYiOjE2Mjk2MjQ0OTEsImp0aSI6InVHTFY3ZEwzUVRSNGJSRUoiLCJzdWIiOjIxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.wkJgQT7RwycOA_3asmK8kdMRvV4UMpGXpeB2GBu6t0s
        403:
          description: failed
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid, you used this device before !!'
                properties:
                  message:
                    type: string
                    example: 'Invalid, you used this device before !!'
        400:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Invalid data\"\n \"Errors in\":{\"email\":[\"The email field is required.\"]}\n}"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user (max:255).'
                  example: aya
                email:
                  type: string
                  description: 'The email of the user(max:255, must be unique).'
                  example: aya@gmail.com
                password:
                  type: string
                  description: 'The password of the user(atleast 8 characters).'
                  example: ayasameh123
                phone:
                  type: string
                  description: 'The phone of the user(start with:01, max:11).'
                  example: '01234567899'
                gender:
                  type: string
                  description: 'The gender of the user(must be female or male).'
                  example: female
                birth_day:
                  type: date
                  description: 'The birthday of the user(must bebefore:17 years ago).'
                  example: '1999-11-09'
                password_confirmation:
                  type: string
                  description: 'The password confirmation of the user.'
                  example: ayasameh123
              required:
                - name
                - email
                - password
                - phone
                - gender
                - birth_day
                - password_confirmation
      security: []
  /api/login:
    post:
      summary: 'User Login'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"logged in successfully\"\n \"AccessToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9sb2dpbiIsImlhdCI6MTYyOTczOTEwNiwiZXhwIjoxNjI5NzQyNzA2LCJuYmYiOjE2Mjk3MzkxMDYsImp0aSI6IjZtQWFzSDhkVFFiOTNZeFUiLCJzdWIiOjIxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.97UdgcALxqA5EMcRRZp5q0zDx-fKDiNwc-DwUMaUlHc\"\n}"
        404:
          description: failed
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No such user, invalid email or password'
                properties:
                  message:
                    type: string
                    example: 'No such user, invalid email or password'
        400:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Invalid data\"\n \"Errors in\":{\"email\":[\"The email field is required.\"]}\n}"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email of the user.'
                  example: aya@gmail.com
                password:
                  type: string
                  description: 'The password of the user.'
                  example: ayasameh123
                remember:
                  type: boolean
                  description: 'The remember me of the user.'
                  example: true
              required:
                - email
                - password
                - remember
      security: []
  /api/forgot-password:
    post:
      summary: 'Forget password request'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Reset password link sent successfully'
                properties:
                  message:
                    type: string
                    example: 'Reset password link sent successfully'
        404:
          description: failed
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No such user'
                properties:
                  message:
                    type: string
                    example: 'No such user'
        400:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Invalid data\"\n \"Errors in\":{\"email\":[\"The email field is required.\"]}\n}"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The email of the user.'
                  example: aya@gmail.com
              required:
                - email
      security: []
  /api/reset-password:
    post:
      summary: 'New password request'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Your password has been reset!'
                properties:
                  message:
                    type: string
                    example: 'Your password has been reset!'
        404:
          description: failed
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'No such user'
                properties:
                  message:
                    type: string
                    example: 'No such user'
        400:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Invalid data\"\n \"Errors in\":{\"email\":[\"The email field is required.\"]}\n}"
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The token of the user.'
                  example: 68d43b6b3ea9d817a1fdc0ea4fa25d2f4c42f91f47ae5525b95e41ef87ab6c30
                email:
                  type: string
                  description: 'The email of the user.'
                  example: aya@gmail.com
                password:
                  type: string
                  description: 'The password of the user.'
                  example: ayasameh123
                password_confirmation:
                  type: string
                  description: 'The password confirmation of the user.'
                  example: ayasameh123
              required:
                - token
                - email
                - password
                - password_confirmation
      security: []
  /api/confirm-password:
    post:
      summary: 'Confirm the user''s password'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password Confirmed'
                properties:
                  message:
                    type: string
                    example: 'Password Confirmed'
      tags:
        - Authentication
  /api/logout:
    post:
      summary: 'User Logout'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'logged out successfully'
                properties:
                  message:
                    type: string
                    example: 'logged out successfully'
      tags:
        - Authentication
  '/api/verify-email/{id}/{hash}':
    get:
      summary: 'Verify user''s email address'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Email Verified'
                properties:
                  message:
                    type: string
                    example: 'Email Verified'
      tags:
        - Authentication
    parameters:
      -
        in: path
        name: id
        description: 'The id of the user.'
        example: 8
        required: true
        schema:
          type: integer
      -
        in: path
        name: hash
        description: 'the hashed token.'
        example: 72aa8d4285d697a6f82edd86fe9e29e039dea408
        required: true
        schema:
          type: string
  /api/email/verification-notification:
    post:
      summary: 'Send a new email verification notification'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Successfully Verified'
                properties:
                  message:
                    type: string
                    example: 'Successfully Verified'
      tags:
        - Authentication
      security: []
  /api/logout/Admin:
    post:
      summary: 'User Logout'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'logged out successfully'
                properties:
                  message:
                    type: string
                    example: 'logged out successfully'
      tags:
        - Authentication
  /api/blockFriend:
    post:
      summary: 'This function to crate block for specific user.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Block Created Successfully'
                properties:
                  message:
                    type: string
                    example: 'Block Created Successfully'
      tags:
        - 'Block Controller'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver:
                  type: id.
                  description: ''
                  example: nostrum
      security: []
  /api/getAllBlocks:
    get:
      summary: 'This function to retrieve all blocks.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  blocks:
                    -
                      id: 12
                      blocker_id: 1
                      blocked_id: 10
                      created_at: '1974-05-06T00:00:00.000000Z'
                      updated_at: '2008-08-29T00:00:00.000000Z'
                properties:
                  blocks:
                    type: array
                    example:
                      -
                        id: 12
                        blocker_id: 1
                        blocked_id: 10
                        created_at: '1974-05-06T00:00:00.000000Z'
                        updated_at: '2008-08-29T00:00:00.000000Z'
                    items:
                      type: object
      tags:
        - 'Block Controller'
      security: []
  /api/removeBlock:
    delete:
      summary: 'This function to remove blocked user.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Block has been Deleted Successfully'
                properties:
                  message:
                    type: string
                    example: 'Block has been Deleted Successfully'
      tags:
        - 'Block Controller'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: '->'
                  description: 'id of block.'
                  example: ipsam
      security: []
  /api/startChat:
    post:
      summary: 'Start New Chat'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        201:
          description: 'succes{'
          content:
            text/plain:
              schema:
                type: string
                example: "\"user : \": 12,\n  \"successfully started chat with user : \": \"9\",\n  \"Chat details :\": {\n     \"user_1\": 12,\n      \"user_2\": \"9\",\n     \"updated_at\": \"2021-08-25T21:05:48.000000Z\",\n      \"created_at\": \"2021-08-25T21:05:48.000000Z\",\n      \"id\": 17\n }\n}"
        405:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "{\n     \"Request between user : \": 12,\n     \"and user : \": \"9\",\n     \"message\": \"isnot approved, cannot start chat\",\n}"
      tags:
        - 'Chat Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userid2:
                  type: integer
                  description: 'the id of the user to start chat with'
                  example: 19
              required:
                - userid2
  /api/sendMsg:
    post:
      summary: 'Send New Msg'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        201:
          description: 'succes{'
          content:
            text/plain:
              schema:
                type: string
                example: "\"msg sent\"\n}"
        405:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "{\n   \"can not send more than 4 msgs to this account\"\n}"
      tags:
        - 'Chat Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                chat_id:
                  type: integer
                  description: 'the id of the chat'
                  example: 20
                reciever_id:
                  type: integer
                  description: 'the id of the user to send msg to'
                  example: 10
                content:
                  type: string
                  description: 'the content of the msg'
                  example: at
              required:
                - chat_id
                - reciever_id
                - content
  /api/sendPic:
    post:
      summary: 'Send New Pic'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: 'succes{'
          content:
            text/plain:
              schema:
                type: string
                example: "\"pic sent\"\n}"
        405:
          description: failed
          content:
            application/json:
              schema:
                type: object
                example:
                  'Request between user : ': 12
                  'and user : ': '10'
                  message: 'isnot approved, cannot send pic'
                properties:
                  'Request between user : ':
                    type: integer
                    example: 12
                  'and user : ':
                    type: string
                    example: '10'
                  message:
                    type: string
                    example: 'isnot approved, cannot send pic'
        403:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "{\n   \"This feature isnot available for Free members\"\n}"
      tags:
        - 'Chat Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message_id:
                  type: integer
                  description: 'the id of the chat'
                  example: 14
                reciever_id:
                  type: integer
                  description: 'the id of the user to send msg to'
                  example: 16
                image:
                  type: string
                  description: 'the content of the msg'
                  example: aspernatur
              required:
                - message_id
                - reciever_id
                - image
  /api/numOfReports:
    get:
      summary: 'Get Number Of Reports For Each User'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: 'succes{'
          content:
            text/plain:
              schema:
                type: string
                example: "[\n      [\n         {\n              \"name\": \"keshawn.thompson\",\n              \"reports\": 243873\n          },\n          {\n             \"name\": \"beryl.stark\",\n              \"reports\": 98310538\n          },\n          {\n              \"name\": \"nkuhic\",\n              \"reports\": 11399\n          },\n      ]\n  ]\n}"
      tags:
        - 'Chat Controller'
  /api/numOfMsgs:
    get:
      summary: 'Get Number Of Msgs For Current User'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: 'succes{'
          content:
            text/plain:
              schema:
                type: string
                example: "4\n}"
      tags:
        - 'Chat Controller'
  '/api/statusOfMsgs/{id}':
    get:
      summary: 'Get Status Of Msg For Certain Msg'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: 'succes{'
          content:
            text/plain:
              schema:
                type: string
                example: "'delivered'\n}"
      tags:
        - 'Chat Controller'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the statusOfMsg.'
        example: atque
        required: true
        schema:
          type: string
  '/api/deleteMsg/{id}/{userid2}':
    delete:
      summary: 'Delete Msg'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: 'succes{'
          content:
            text/plain:
              schema:
                type: string
                example: "\"msg is deleted successfully \"\n}"
      tags:
        - 'Chat Controller'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the deleteMsg.'
        example: sed
        required: true
        schema:
          type: string
      -
        in: path
        name: userid2
        description: ''
        example: eum
        required: true
        schema:
          type: string
  /api/profile:
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Un Authenticated'
                properties:
                  message:
                    type: string
                    example: 'Un Authenticated'
      tags:
        - Endpoints
      security: []
  /api/user:
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        403:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Un Authenticated'
                properties:
                  message:
                    type: string
                    example: 'Un Authenticated'
      tags:
        - Endpoints
      security: []
  /api/addFriend:
    post:
      summary: 'This function to add someone to fav table.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'You Add this user before'
                properties:
                  message:
                    type: string
                    example: 'You Add this user before'
      tags:
        - 'Fav Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver:
                  type: id
                  description: integer
                  example: soluta
              required:
                - receiver
      security: []
  /api/getAllFriends:
    get:
      summary: 'This function can retrieve alll persons from fav table.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  User:
                    -
                      id: 1
                      user_1: 1
                      user_2: 10
                      created_at: '1974-07-03T00:00:00.000000Z'
                      updated_at: '1981-01-31T00:00:00.000000Z'
                    -
                      id: 11
                      user_1: 1
                      user_2: 3
                      created_at: '2021-08-17T19:25:55.000000Z'
                      updated_at: '2021-08-17T00:00:00.000000Z'
                    -
                      id: 12
                      user_1: 1
                      user_2: 10
                      created_at: '1974-11-28T00:00:00.000000Z'
                      updated_at: '1971-09-05T00:00:00.000000Z'
                    -
                      id: 22
                      user_1: 1
                      user_2: 10
                      created_at: '1995-11-18T00:00:00.000000Z'
                      updated_at: '2005-07-14T00:00:00.000000Z'
                properties:
                  User:
                    type: array
                    example:
                      -
                        id: 1
                        user_1: 1
                        user_2: 10
                        created_at: '1974-07-03T00:00:00.000000Z'
                        updated_at: '1981-01-31T00:00:00.000000Z'
                      -
                        id: 11
                        user_1: 1
                        user_2: 3
                        created_at: '2021-08-17T19:25:55.000000Z'
                        updated_at: '2021-08-17T00:00:00.000000Z'
                      -
                        id: 12
                        user_1: 1
                        user_2: 10
                        created_at: '1974-11-28T00:00:00.000000Z'
                        updated_at: '1971-09-05T00:00:00.000000Z'
                      -
                        id: 22
                        user_1: 1
                        user_2: 10
                        created_at: '1995-11-18T00:00:00.000000Z'
                        updated_at: '2005-07-14T00:00:00.000000Z'
                    items:
                      type: object
      tags:
        - 'Fav Controller'
      security: []
  /api/removeFromFav:
    delete:
      summary: 'This function can remove person from fav table.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User has been Deleted Successfully'
                properties:
                  message:
                    type: string
                    example: 'User has been Deleted Successfully'
      tags:
        - 'Fav Controller'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: '-->'
                  description: 'id of fav table to remove him from table.'
                  example: commodi
      security: []
  /api/report:
    post:
      summary: 'This function to create report message'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'report has been Created Successfully'
                properties:
                  message:
                    type: string
                    example: 'report has been Created Successfully'
      tags:
        - 'Report Controller'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                message_id:
                  type: ':'
                  description: 'id of message required integer'
                  example: ratione
      security: []
  /api/request:
    post:
      summary: 'This function to create request with another user.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "if you requested this user before\n{\"message\" : \"You Make this request before!\"}"
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"message" => "Requests Created Successfully"}'
      tags:
        - 'Request Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver:
                  type: id
                  description: ''
                  example: qui
              required:
                - receiver
      security: []
  /api/decision:
    post:
      summary: 'This function to change status of request from pending to confirm .'
      description: '.. etc.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Requests Updated Successfully'
                properties:
                  message:
                    type: string
                    example: 'Requests Updated Successfully'
      tags:
        - 'Request Controller'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                choice:
                  type: '->take'
                  description: 'one of the following choices 1 --> accept , 2 --> refuse required integer'
                  example: deleniti
      security: []
  /api/getAllRequests:
    get:
      summary: 'this function to return all request for auth user.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  requests_sent:
                    -
                      id: 1
                      sender_id: 1
                      reciever_id: 10
                      status: 12
                      created_at: '1996-01-11T00:00:00.000000Z'
                      updated_at: '2007-10-29T00:00:00.000000Z'
                    -
                      id: 11
                      sender_id: 1
                      reciever_id: 2
                      status: 0
                      created_at: '2021-08-17T16:15:48.000000Z'
                      updated_at: '2021-08-17T00:00:00.000000Z'
                    -
                      id: 18
                      sender_id: 1
                      reciever_id: 3
                      status: 1
                      created_at: '2021-08-17T18:46:39.000000Z'
                      updated_at: '2021-08-17T00:00:00.000000Z'
                    -
                      id: 19
                      sender_id: 1
                      reciever_id: 10
                      status: 616849219
                      created_at: '1994-06-23T00:00:00.000000Z'
                      updated_at: '2006-10-09T00:00:00.000000Z'
                    -
                      id: 29
                      sender_id: 1
                      reciever_id: 10
                      status: 962946913
                      created_at: '2010-04-24T00:00:00.000000Z'
                      updated_at: '1982-06-13T00:00:00.000000Z'
                  requests_received:
                    -
                      id: 28
                      sender_id: 10
                      reciever_id: 1
                      status: 22
                      created_at: '1971-07-30T00:00:00.000000Z'
                      updated_at: '1998-01-19T00:00:00.000000Z'
                    -
                      id: 38
                      sender_id: 10
                      reciever_id: 1
                      status: 4060416
                      created_at: '1977-01-12T00:00:00.000000Z'
                      updated_at: '1973-04-20T00:00:00.000000Z'
                properties:
                  requests_sent:
                    type: array
                    example:
                      -
                        id: 1
                        sender_id: 1
                        reciever_id: 10
                        status: 12
                        created_at: '1996-01-11T00:00:00.000000Z'
                        updated_at: '2007-10-29T00:00:00.000000Z'
                      -
                        id: 11
                        sender_id: 1
                        reciever_id: 2
                        status: 0
                        created_at: '2021-08-17T16:15:48.000000Z'
                        updated_at: '2021-08-17T00:00:00.000000Z'
                      -
                        id: 18
                        sender_id: 1
                        reciever_id: 3
                        status: 1
                        created_at: '2021-08-17T18:46:39.000000Z'
                        updated_at: '2021-08-17T00:00:00.000000Z'
                      -
                        id: 19
                        sender_id: 1
                        reciever_id: 10
                        status: 616849219
                        created_at: '1994-06-23T00:00:00.000000Z'
                        updated_at: '2006-10-09T00:00:00.000000Z'
                      -
                        id: 29
                        sender_id: 1
                        reciever_id: 10
                        status: 962946913
                        created_at: '2010-04-24T00:00:00.000000Z'
                        updated_at: '1982-06-13T00:00:00.000000Z'
                    items:
                      type: object
                  requests_received:
                    type: array
                    example:
                      -
                        id: 28
                        sender_id: 10
                        reciever_id: 1
                        status: 22
                        created_at: '1971-07-30T00:00:00.000000Z'
                        updated_at: '1998-01-19T00:00:00.000000Z'
                      -
                        id: 38
                        sender_id: 10
                        reciever_id: 1
                        status: 4060416
                        created_at: '1977-01-12T00:00:00.000000Z'
                        updated_at: '1973-04-20T00:00:00.000000Z'
                    items:
                      type: object
      tags:
        - 'Request Controller'
      security: []
  /api/deleteRequest:
    delete:
      summary: 'this function to delete specific user.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Requests has been Deleted Successfully'
                properties:
                  message:
                    type: string
                    example: 'Requests has been Deleted Successfully'
      tags:
        - 'Request Controller'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: ':'
                  description: 'id of request required integer'
                  example: ex
      security: []
  /api/auth/google:
    get:
      summary: 'User Login/Sign up with google redirect page.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        302:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta http-equiv=\"refresh\" content=\"0;url='https://accounts.google.com/o/oauth2/auth?client_id=669321737133-0480hhddj82g3ndaoc7jh0dtdpbag774.apps.googleusercontent.com&amp;scope=openid+profile+email&amp;response_type=code&amp;state=phone%3D%26gender%3D%26birth_day%3D'\" />\n\n        <title>Redirecting to https://accounts.google.com/o/oauth2/auth?client_id=669321737133-0480hhddj82g3ndaoc7jh0dtdpbag774.apps.googleusercontent.com&amp;scope=openid+profile+email&amp;response_type=code&amp;state=phone%3D%26gender%3D%26birth_day%3D</title>\n    </head>\n    <body>\n        Redirecting to <a href=\"https://accounts.google.com/o/oauth2/auth?client_id=669321737133-0480hhddj82g3ndaoc7jh0dtdpbag774.apps.googleusercontent.com&amp;scope=openid+profile+email&amp;response_type=code&amp;state=phone%3D%26gender%3D%26birth_day%3D\">https://accounts.google.com/o/oauth2/auth?client_id=669321737133-0480hhddj82g3ndaoc7jh0dtdpbag774.apps.googleusercontent.com&amp;scope=openid+profile+email&amp;response_type=code&amp;state=phone%3D%26gender%3D%26birth_day%3D</a>.\n    </body>\n</html>"
      tags:
        - Socialization
      security: []
  /api/auth/google/callback:
    get:
      summary: 'User Login/Sign up with google handling.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"logged in with google account successfully\"\n \"AccessToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9sb2dpbiIsImlhdCI6MTYyOTczOTEwNiwiZXhwIjoxNjI5NzQyNzA2LCJuYmYiOjE2Mjk3MzkxMDYsImp0aSI6IjZtQWFzSDhkVFFiOTNZeFUiLCJzdWIiOjIxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.97UdgcALxqA5EMcRRZp5q0zDx-fKDiNwc-DwUMaUlHc\"\n}"
        400:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Invalid data\"\n \"Errors in\":{\"phone\":[\"The phone field is required.\"]}\n}"
        201:
          description: created
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Signed up with google account successfully\"\n \"AccessToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9sb2dpbiIsImlhdCI6MTYyOTczOTEwNiwiZXhwIjoxNjI5NzQyNzA2LCJuYmYiOjE2Mjk3MzkxMDYsImp0aSI6IjZtQWFzSDhkVFFiOTNZeFUiLCJzdWIiOjIxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.97UdgcALxqA5EMcRRZp5q0zDx-fKDiNwc-DwUMaUlHc\"\n}"
      tags:
        - Socialization
      security: []
  /api/auth/facebook:
    get:
      summary: 'User Login/Sign up with facebook redirect page.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        302:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\" />\n        <meta http-equiv=\"refresh\" content=\"0;url='https://www.facebook.com/v3.3/dialog/oauth?client_id=327456915746889&amp;scope=email&amp;response_type=code&amp;state=phone%3D%26gender%3D%26birth_day%3D'\" />\n\n        <title>Redirecting to https://www.facebook.com/v3.3/dialog/oauth?client_id=327456915746889&amp;scope=email&amp;response_type=code&amp;state=phone%3D%26gender%3D%26birth_day%3D</title>\n    </head>\n    <body>\n        Redirecting to <a href=\"https://www.facebook.com/v3.3/dialog/oauth?client_id=327456915746889&amp;scope=email&amp;response_type=code&amp;state=phone%3D%26gender%3D%26birth_day%3D\">https://www.facebook.com/v3.3/dialog/oauth?client_id=327456915746889&amp;scope=email&amp;response_type=code&amp;state=phone%3D%26gender%3D%26birth_day%3D</a>.\n    </body>\n</html>"
      tags:
        - Socialization
      security: []
  /api/auth/facebook/callback:
    get:
      summary: 'User Login/Sign up with facebook handling.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"logged in with facebook account successfully\"\n \"AccessToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9sb2dpbiIsImlhdCI6MTYyOTczOTEwNiwiZXhwIjoxNjI5NzQyNzA2LCJuYmYiOjE2Mjk3MzkxMDYsImp0aSI6IjZtQWFzSDhkVFFiOTNZeFUiLCJzdWIiOjIxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.97UdgcALxqA5EMcRRZp5q0zDx-fKDiNwc-DwUMaUlHc\"\n}"
        400:
          description: failed
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Invalid data\"\n \"Errors in\":{\"phone\":[\"The phone field is required.\"]}\n}"
        201:
          description: created
          content:
            text/plain:
              schema:
                type: string
                example: "{\n \"message\": \"Signed up with facebook account successfully\"\n \"AccessToken\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOlwvXC8xMjcuMC4wLjE6ODAwMFwvYXBpXC9sb2dpbiIsImlhdCI6MTYyOTczOTEwNiwiZXhwIjoxNjI5NzQyNzA2LCJuYmYiOjE2Mjk3MzkxMDYsImp0aSI6IjZtQWFzSDhkVFFiOTNZeFUiLCJzdWIiOjIxLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.97UdgcALxqA5EMcRRZp5q0zDx-fKDiNwc-DwUMaUlHc\"\n}"
      tags:
        - Socialization
      security: []
  /api/search:
    post:
      summary: 'this function show verse gender'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                example:
                  -
                    id: 2
                    name: monica47
                    email: beatty.dorothea@example.com
                    phone: '(682) 402-5102'
                    birth_day: '1984-06-01 00:00:00'
                    gender: Ms.
                    image: 'https://via.placeholder.com/640x480.png/0077ee?text=earum'
                    reports: 8501891
                    ban: 1
                    ban_count: 877
                    certified: 1
                    VIP: 0
                    created_at: '2021-08-17T16:23:33.000000Z'
                    updated_at: '2009-02-13T00:00:00.000000Z'
      tags:
        - 'User controller'
      security: []
  /api/delete:
    delete:
      summary: 'this function delete user and his chat history'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '[''message'':''Your account has been deleted!'']'
      tags:
        - 'User controller'
      security: []
  /api/get-all-questions:
    post:
      summary: 'Get all questions'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  question: 'How tall are you'
                  created_at: '2021-08-17 09:44:0'
                  updated_at: '2021-08-17'
                properties:
                  id:
                    type: integer
                    example: 1
                  question:
                    type: string
                    example: 'How tall are you'
                  created_at:
                    type: string
                    example: '2021-08-17 09:44:0'
                  updated_at:
                    type: string
                    example: '2021-08-17'
      tags:
        - 'User info ,questions and suggested answers'
      security: []
  /api/get-question-by-id:
    post:
      summary: 'Get question by id'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  question: 'How tall are you'
                  created_at: '2021-08-17 09:44:0'
                  updated_at: '2021-08-17'
                properties:
                  id:
                    type: integer
                    example: 1
                  question:
                    type: string
                    example: 'How tall are you'
                  created_at:
                    type: string
                    example: '2021-08-17 09:44:0'
                  updated_at:
                    type: string
                    example: '2021-08-17'
      tags:
        - 'User info ,questions and suggested answers'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: required.
                  example: 13
      security: []
  /api/add-question:
    post:
      summary: 'Create a question'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Question is added successfully'
                properties:
                  message:
                    type: string
                    example: 'Question is added successfully'
      tags:
        - 'User info ,questions and suggested answers'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                AccessToken:
                  type: string
                  description: required.
                  example: iure
                question:
                  type: string
                  description: 'the question.'
                  example: earum
              required:
                - question
      security: []
  /api/update-question:
    post:
      summary: 'Update a question'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Question is added successfully'
                properties:
                  message:
                    type: string
                    example: 'Question is added successfully'
      tags:
        - 'User info ,questions and suggested answers'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: required.
                  example: 4
                question:
                  type: string
                  description: 'the question.'
                  example: vel
      security: []
  /api/delete-question:
    post:
      summary: 'Delete a question'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'question is deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'question is deleted successfully'
      tags:
        - 'User info ,questions and suggested answers'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: required.
                  example: 14
      security: []
  /api/get-all-questions-with-answers:
    post:
      summary: 'Get all questions with it''s answers'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  question: 'Do you smoke?'
                  answers:
                    -
                      answer: 'no'
                    -
                      answer: 'yes'
                properties:
                  question:
                    type: string
                    example: 'Do you smoke?'
                  answers:
                    type: array
                    example:
                      -
                        answer: 'no'
                      -
                        answer: 'yes'
                    items:
                      type: object
      tags:
        - 'User info ,questions and suggested answers'
      security: []
  /api/get-all-answers:
    post:
      summary: 'Get all suggested answers'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  question_id: 1
                  answer: 'yes'
                  created_at: '2021-08-17 09:44:0'
                  updated_at: '2021-08-17'
                properties:
                  id:
                    type: integer
                    example: 1
                  question_id:
                    type: integer
                    example: 1
                  answer:
                    type: string
                    example: 'yes'
                  created_at:
                    type: string
                    example: '2021-08-17 09:44:0'
                  updated_at:
                    type: string
                    example: '2021-08-17'
      tags:
        - 'User info ,questions and suggested answers'
      security: []
  /api/get-answer-by-id:
    post:
      summary: 'Get answer by id'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n   \"id\":1,\n   \"question_id\":1,\n   \"answer\":\"yes\",\n   \"created_at\":\"2021-08-17 09:44:0\",\n   \"updated_at\":\"2021-08-17\",\n}"
      tags:
        - 'User info ,questions and suggested answers'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: required.
                  example: 9
      security: []
  /api/add-answer:
    post:
      summary: 'Create an answer'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Answer is added successfully'
                properties:
                  message:
                    type: string
                    example: 'Answer is added successfully'
      tags:
        - 'User info ,questions and suggested answers'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                question_id:
                  type: integer
                  description: 'the id of the question.'
                  example: 15
                answer:
                  type: string
                  description: 'the answer.'
                  example: voluptatem
              required:
                - answer
      security: []
  /api/update-answer:
    post:
      summary: 'Update an answer'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Answer is added successfully'
                properties:
                  message:
                    type: string
                    example: 'Answer is added successfully'
      tags:
        - 'User info ,questions and suggested answers'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: required.
                  example: 4
                question_id:
                  type: integer
                  description: 'the id of the question.'
                  example: 14
                answer:
                  type: string
                  description: 'the answer.'
                  example: molestiae
      security: []
  /api/delete-answer:
    post:
      summary: 'Delete an answer'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Answer is deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'Answer is deleted successfully'
      tags:
        - 'User info ,questions and suggested answers'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: required.
                  example: 8
      security: []
  /api/get-all-usersinfo:
    post:
      summary: 'Get all users info'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  user_id: '1'
                  answer_id: '1'
                  answer: 'no'
                  created_at: '2021-08-17 09:44:0'
                  updated_at: '2021-08-17'
                properties:
                  id:
                    type: integer
                    example: 1
                  user_id:
                    type: string
                    example: '1'
                  answer_id:
                    type: string
                    example: '1'
                  answer:
                    type: string
                    example: 'no'
                  created_at:
                    type: string
                    example: '2021-08-17 09:44:0'
                  updated_at:
                    type: string
                    example: '2021-08-17'
      tags:
        - 'User info ,questions and suggested answers (Sarah Hisham)'
      security: []
  /api/get-userinfo-by-id:
    post:
      summary: 'Get user info by id'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  id: 1
                  user_id: '1'
                  answer_id: '1'
                  answer: 'no'
                  created_at: '2021-08-17 09:44:0'
                  updated_at: '2021-08-17'
                properties:
                  id:
                    type: integer
                    example: 1
                  user_id:
                    type: string
                    example: '1'
                  answer_id:
                    type: string
                    example: '1'
                  answer:
                    type: string
                    example: 'no'
                  created_at:
                    type: string
                    example: '2021-08-17 09:44:0'
                  updated_at:
                    type: string
                    example: '2021-08-17'
      tags:
        - 'User info ,questions and suggested answers (Sarah Hisham)'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: ''
                  example: 6
              required:
                - id
      security: []
  /api/add-userinfo:
    post:
      summary: 'Create a user info'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User info is added successfully'
                properties:
                  message:
                    type: string
                    example: 'User info is added successfully'
      tags:
        - 'User info ,questions and suggested answers (Sarah Hisham)'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'the id of the user.'
                  example: 7
                answer_id:
                  type: integer
                  description: 'the id of the answer.'
                  example: 7
                answer:
                  type: string
                  description: 'the answer.'
                  example: quaerat
              required:
                - user_id
                - answer_id
      security: []
  /api/update-userinfo:
    post:
      summary: 'Update a user info'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n   \"message\":\"User info is added successfully\""
      tags:
        - 'User info ,questions and suggested answers (Sarah Hisham)'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: required.
                  example: 2
                user_id:
                  type: integer
                  description: 'the id of the user.'
                  example: 2
                answer_id:
                  type: integer
                  description: 'the id of the answer.'
                  example: 13
                answer:
                  type: string
                  description: 'the answer.'
                  example: et
              required:
                - user_id
                - answer_id
      security: []
  /api/delete-userinfo:
    post:
      summary: 'Delete a user info'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'User info is deleted successfully'
                properties:
                  message:
                    type: string
                    example: 'User info is deleted successfully'
      tags:
        - 'User info ,questions and suggested answers (Sarah Hisham)'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: required.
                  example: 18
      security: []
  /api/preference:
    post:
      summary: Preference
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n    \"user\":\"Ahmed33\",\n    \"common percentage\":\"87\",\n},\n{\n  \"question\": \"Do you smoke?\",\n  \"answer\": \"no\"\n},\n{\n  \"question\": \"Are you vegeterian?\",\n   \"answer\": \"yes\"\n}"
      tags:
        - 'User info ,questions and suggested answers (Sarah Hisham)'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'the id of the user.'
                  example: 11
              required:
                - user_id
      security: []
  /api/hide:
    post:
      summary: Hide
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  answer: 'no'
                properties:
                  answer:
                    type: string
                    example: 'no'
      tags:
        - 'User info ,questions and suggested answers (Sarah Hisham)'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  description: 'the id of the user.'
                  example: 13
                answer_id:
                  type: integer
                  description: 'the id of the answer the user wants to hide.'
                  example: 16
      security: []
tags:
  -
    name: 'Admin Controller-1'
    description: ''
  -
    name: 'Admin Controller 2'
    description: 'APIs for admin'
  -
    name: Authentication
    description: ''
  -
    name: 'Block Controller'
    description: "This class has the following features:\n1- create block for user.\n2- remove a block.\n3- retrieve all blocks."
  -
    name: 'Chat Controller'
    description: ''
  -
    name: Endpoints
    description: ''
  -
    name: 'Fav Controller'
    description: "This class has the following features:\n1- add someone to fav list.\n2- delete fav from fav table.\n3- retrieve all fav persons."
  -
    name: 'Report Controller'
    description: 'This class can Create report for message.'
  -
    name: 'Request Controller'
    description: "this class can do the following features:\n1- Create request with another user.\n2- Update status of request from pending to accept and start chatting or refused it.\n3- Retrieve all requests\n4- delete request"
  -
    name: Socialization
    description: ''
  -
    name: 'User controller'
    description: 'this controller control in user''s functions'
  -
    name: 'User info ,questions and suggested answers'
    description: "\n\nAPIs for User info ,questions and suggested  features"
  -
    name: 'User info ,questions and suggested answers (Sarah Hisham)'
    description: "\n\nAPIs for User info ,questions and suggested  features"
